"use strict";(self.webpackChunkfirst_docusaurus=self.webpackChunkfirst_docusaurus||[]).push([[249],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),f=o,m=p["".concat(s,".").concat(f)]||p[f]||d[f]||i;return n?r.createElement(m,a(a({ref:t},c),{},{components:n})):r.createElement(m,a({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3193:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return c},default:function(){return p}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],l={},s="Continuous Integration",u={unversionedId:"developer_guide/ci",id:"developer_guide/ci",isDocsHomePage:!1,title:"Continuous Integration",description:"After each submitted PR to Athens, GitHub Actions runs the continuous integration workflow declared in .github/workflows/build.yml. This workflow runs scripts from package.json to test, lint, and build Athens. You can see these workflows in practice in the Actions tab.",source:"@site/docs/developer_guide/ci.md",sourceDirName:"developer_guide",slug:"/developer_guide/ci",permalink:"/docs/developer_guide/ci",editUrl:"https://github.com/athensresearch/docs/edit/main/docs/developer_guide/ci.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"REPL",permalink:"/docs/developer_guide/repl"},next:{title:"Git and GitHub Conventions",permalink:"/docs/developer_guide/git"}},c=[{value:"Testing",id:"testing",children:[],level:3},{value:"Linting",id:"linting",children:[],level:3},{value:"Clojure Styling",id:"clojure-styling",children:[],level:3},{value:"Unused Variable Checking",id:"unused-variable-checking",children:[],level:3}],d={toc:c};function p(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"continuous-integration"},"Continuous Integration"),(0,i.kt)("p",null,"After each submitted PR to Athens, GitHub Actions runs the continuous integration workflow declared in ",(0,i.kt)("inlineCode",{parentName:"p"},".github/workflows/build.yml"),". This workflow runs scripts from ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," to test, lint, and build Athens. You can see these workflows in practice in the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/athensresearch/athens/actions/"},"Actions tab"),"."),(0,i.kt)("p",null,"However, it's a lot faster if you run these tests locally, so you don't have to submit a PR each time to make sure the workflow succeeds."),(0,i.kt)("h3",{id:"testing"},"Testing"),(0,i.kt)("p",null,"No additional installation is needed. Just run this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"yarn client:test\nyarn server:test\n")),(0,i.kt)("p",null,"The first command runs tests for the client code, and the second runs tests for the server code."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'$ yarn test\n\n... lots of logging\n\nTesting athens.patterns-test\n\nTesting athens.walk-test\n13:55:53.824 DEBUG [main] athens.walk - walk-string {:node/titles ("hey"), :page/refs ([:node/title "hey"])}\n13:55:53.824 DEBUG [main] athens.walk - walk-string {:node/titles ("hola"), :page/refs ([:node/title "hola"])}\n13:55:53.825 DEBUG [main] athens.walk - walk-string {:node/titles ("aloha"), :page/refs ([:node/title "aloha"])}\n13:55:53.825 DEBUG [main] athens.walk - walk-string #:block{:refs ("uid123")}\n\nTesting event-sync.core-test\n\nRan 70 tests containing 606 assertions.\n0 failures, 0 errors.\n\u2728  Done in 6.36s.\n')),(0,i.kt)("h3",{id:"linting"},"Linting"),(0,i.kt)("p",null,"We are linting Clojure code using ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/borkdude/clj-kondo"},"clj-kondo"),".\nOur clj-kondo configuration is in ",(0,i.kt)("inlineCode",{parentName:"p"},".clj-kondo/config.edn"),"."),(0,i.kt)("p",null,"To see the problems reported by clj-kondo, run ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn lint"),". Example run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ yarn lint\nyarn run v1.22.17\n$ clojure -M:clj-kondo --lint src\nlinting took 1549ms, errors: 0, warnings: 0\n\u2728  Done in 6.85s.\n")),(0,i.kt)("p",null,"Your editor may also be able to integrate with clj-kondo\u2019s output. For example, if you use ",(0,i.kt)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=betterthantomorrow.calva"},"Calva")," for VS Code, then clj-kondo\u2019s messages are reported in the Problems panel."),(0,i.kt)("h3",{id:"clojure-styling"},"Clojure Styling"),(0,i.kt)("p",null,"To check if your Clojure code is formatted correctly, run ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn style"),". If there is no output and the return code is zero, you\u2019re good. "),(0,i.kt)("p",null,"To reformat all your Clojure files in place, run ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn style:fix"),"."),(0,i.kt)("h3",{id:"unused-variable-checking"},"Unused Variable Checking"),(0,i.kt)("p",null,"Run ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn carve")," to get a report of unused variables. ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn carve:interactive")," will start an interactive prompt that lets you remove or ignore unused code."))}p.isMDXComponent=!0}}]);