"use strict";(self.webpackChunkfirst_docusaurus=self.webpackChunkfirst_docusaurus||[]).push([[625],{9898:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return c},default:function(){return p}});var i=n(7462),o=n(3366),r=(n(7294),n(3905)),a=["components"],l={},s="Continuous Integration",u={unversionedId:"developing/ci",id:"developing/ci",isDocsHomePage:!1,title:"Continuous Integration",description:"After each submitted PR to Athens, GitHub Actions runs the continuous integration workflow declared in .github/workflows/build.yml. This workflow runs scripts from script/ to test, lint, and build Athens. You can see these workflows in practice in the Actions tab.",source:"@site/docs/developing/ci.md",sourceDirName:"developing",slug:"/developing/ci",permalink:"/docs/developing/ci",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/developing/ci.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"REPL",permalink:"/docs/developing/repl"},next:{title:"Git and GitHub Conventions",permalink:"/docs/developing/git"}},c=[{value:"Testing",id:"testing",children:[],level:3},{value:"Linting",id:"linting",children:[],level:3},{value:"Clojure Styling",id:"clojure-styling",children:[],level:3},{value:"Unused Variable Checking",id:"unused-variable-checking",children:[],level:3}],d={toc:c};function p(e){var t=e.components,n=(0,o.Z)(e,a);return(0,r.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"continuous-integration"},"Continuous Integration"),(0,r.kt)("p",null,"After each submitted PR to Athens, GitHub Actions runs the continuous integration workflow declared in ",(0,r.kt)("inlineCode",{parentName:"p"},".github/workflows/build.yml"),". This workflow runs scripts from ",(0,r.kt)("a",{parentName:"p",href:"https://app.gitbook.com/s/-MVghT4Ocm_YaZ2-l20i-2910905616/community/get-involved/script"},(0,r.kt)("inlineCode",{parentName:"a"},"script/"))," to test, lint, and build Athens. You can see these workflows in practice in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/athensresearch/athens/actions/"},"Actions tab"),"."),(0,r.kt)("p",null,"However, it's a lot faster if you run these tests locally, so you don't have to submit a PR each time to make sure the workflow succeeds. You may need to install additional dependencies, though."),(0,r.kt)("h3",{id:"testing"},"Testing"),(0,r.kt)("p",null,"No additional installation is needed. Just run this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"lein test\n")),(0,r.kt)("p",null,"The output will look something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ lein test\n\nTesting athens.block-test\n\nTesting athens.parser-test\n\nTesting athens.patterns-test\n\nRan 4 tests containing 16 assertions.\n0 failures, 0 errors.\n")),(0,r.kt)("h3",{id:"linting"},"Linting"),(0,r.kt)("p",null,"We are linting Clojure code using ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/borkdude/clj-kondo"},"clj-kondo"),". Our clj-kondo configuration is in ",(0,r.kt)("a",{parentName:"p",href:"https://app.gitbook.com/s/-MVghT4Ocm_YaZ2-l20i-2910905616/community/get-involved/.clj-kondo/config.edn"},(0,r.kt)("inlineCode",{parentName:"a"},".clj-kondo/config.edn")),"."),(0,r.kt)("p",null,"For this linting to work, you will need to install ",(0,r.kt)("inlineCode",{parentName:"p"},"clj-kondo"),". Instructions are in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/borkdude/clj-kondo/blob/master/doc/install.md"},(0,r.kt)("inlineCode",{parentName:"a"},"clj-kondo"),"\u2019s installation guide"),"."),(0,r.kt)("p",null,"To see the problems reported by clj-kondo, run ",(0,r.kt)("inlineCode",{parentName:"p"},"script/lint"),". Example run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ script/lint\nlinting took 257ms, errors: 0, warnings: 0\n")),(0,r.kt)("p",null,"Your editor may also be able to integrate with clj-kondo\u2019s output. For example, if you use ",(0,r.kt)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=betterthantomorrow.calva"},"Calva")," for VS Code, then clj-kondo\u2019s messages are reported in the Problems panel."),(0,r.kt)("h3",{id:"clojure-styling"},"Clojure Styling"),(0,r.kt)("p",null,"To format your code or check that your code is formatted correctly, you will need to use ",(0,r.kt)("inlineCode",{parentName:"p"},"cljstyle"),". Instructions for installing it are ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/greglook/cljstyle/tree/master#installation"},"in ",(0,r.kt)("inlineCode",{parentName:"a"},"cljstyle"),"\u2019s README"),"."),(0,r.kt)("p",null,"To check if your Clojure code is formatted correctly, run ",(0,r.kt)("inlineCode",{parentName:"p"},"cljstyle check"),". If there is no output and the return code is zero, you\u2019re good. You can also run ",(0,r.kt)("inlineCode",{parentName:"p"},"script/style"),", but currently it only works if you\u2019re running Linux."),(0,r.kt)("p",null,"To reformat all your Clojure files in place, run ",(0,r.kt)("inlineCode",{parentName:"p"},"cljstyle fix"),"."),(0,r.kt)("h3",{id:"unused-variable-checking"},"Unused Variable Checking"),(0,r.kt)("p",null,"To set this up, first make sure that a global ",(0,r.kt)("inlineCode",{parentName:"p"},"clojure")," binary is installed. You won\u2019t necessarily have a ",(0,r.kt)("inlineCode",{parentName:"p"},"clojure")," binary installed just because you installed Leiningen."),(0,r.kt)("p",null,"Next, just run ",(0,r.kt)("inlineCode",{parentName:"p"},"script/carve"),". The first time you run it it will download ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/borkdude/carve"},"Carve")," as a dependency, which takes about a minute and outputs lots of messages. On subsequent runs ",(0,r.kt)("inlineCode",{parentName:"p"},"script/carve")," won\u2019t output anything unless an unused variable was found."))}p.isMDXComponent=!0}}]);